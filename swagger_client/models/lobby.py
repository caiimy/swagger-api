# coding: utf-8

"""
    Simple Matchmaking API

    This is a simple matchmaking API API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lobby(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'players': 'list[LobbyMember]',
        'name': 'str',
        'status': 'str',
        'player_capacity': 'int',
        'restart_game_on_finish': 'bool',
        'pin': 'str'
    }

    attribute_map = {
        'players': 'players',
        'name': 'name',
        'status': 'status',
        'player_capacity': 'playerCapacity',
        'restart_game_on_finish': 'restartGameOnFinish',
        'pin': 'pin'
    }

    def __init__(self, players=None, name=None, status=None, player_capacity=4, restart_game_on_finish=None, pin=None):  # noqa: E501
        """Lobby - a model defined in Swagger"""  # noqa: E501
        self._players = None
        self._name = None
        self._status = None
        self._player_capacity = None
        self._restart_game_on_finish = None
        self._pin = None
        self.discriminator = None
        if players is not None:
            self.players = players
        self.name = name
        if status is not None:
            self.status = status
        self.player_capacity = player_capacity
        if restart_game_on_finish is not None:
            self.restart_game_on_finish = restart_game_on_finish
        if pin is not None:
            self.pin = pin

    @property
    def players(self):
        """Gets the players of this Lobby.  # noqa: E501

        The list of players currently in the lobby  # noqa: E501

        :return: The players of this Lobby.  # noqa: E501
        :rtype: list[LobbyMember]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this Lobby.

        The list of players currently in the lobby  # noqa: E501

        :param players: The players of this Lobby.  # noqa: E501
        :type: list[LobbyMember]
        """

        self._players = players

    @property
    def name(self):
        """Gets the name of this Lobby.  # noqa: E501


        :return: The name of this Lobby.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lobby.


        :param name: The name of this Lobby.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Lobby.  # noqa: E501


        :return: The status of this Lobby.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Lobby.


        :param status: The status of this Lobby.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def player_capacity(self):
        """Gets the player_capacity of this Lobby.  # noqa: E501


        :return: The player_capacity of this Lobby.  # noqa: E501
        :rtype: int
        """
        return self._player_capacity

    @player_capacity.setter
    def player_capacity(self, player_capacity):
        """Sets the player_capacity of this Lobby.


        :param player_capacity: The player_capacity of this Lobby.  # noqa: E501
        :type: int
        """
        if player_capacity is None:
            raise ValueError("Invalid value for `player_capacity`, must not be `None`")  # noqa: E501

        self._player_capacity = player_capacity

    @property
    def restart_game_on_finish(self):
        """Gets the restart_game_on_finish of this Lobby.  # noqa: E501


        :return: The restart_game_on_finish of this Lobby.  # noqa: E501
        :rtype: bool
        """
        return self._restart_game_on_finish

    @restart_game_on_finish.setter
    def restart_game_on_finish(self, restart_game_on_finish):
        """Sets the restart_game_on_finish of this Lobby.


        :param restart_game_on_finish: The restart_game_on_finish of this Lobby.  # noqa: E501
        :type: bool
        """

        self._restart_game_on_finish = restart_game_on_finish

    @property
    def pin(self):
        """Gets the pin of this Lobby.  # noqa: E501

        A five digit pin password for the lobby  # noqa: E501

        :return: The pin of this Lobby.  # noqa: E501
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this Lobby.

        A five digit pin password for the lobby  # noqa: E501

        :param pin: The pin of this Lobby.  # noqa: E501
        :type: str
        """

        self._pin = pin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lobby, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lobby):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
